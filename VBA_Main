Sub Consolidate_BDD()
    '==================================================================================
    ' MACRO DE CONSOLIDATION DES DONNÉES BDD_COSTS
    '==================================================================================
    
    ' DÉCLARATION DE TOUTES LES VARIABLES
    '==================================================================================
    
    ' Variables pour gérer les feuilles Excel
    Dim selectedSheets As Variant        ' Liste des feuilles à traiter
    Dim wsName As Variant               ' Nom de la feuille en cours de traitement
    Dim ws As Worksheet                 ' Feuille source (celle qu'on lit)
    Dim wsDest As Worksheet            ' Feuille destination (BDD_Costs)
    
    ' Variables pour gérer les colonnes et en-têtes
    Dim headers As Collection           ' Liste des en-têtes de BDD_Costs
    Dim headerName As String           ' Nom d'un en-tête temporaire
    Dim colMap As Object              ' Dictionnaire : nom colonne -> numéro colonne
    
    ' Variables pour les boucles et positions
    Dim i As Long, r As Long, c As Long  ' Compteurs pour les boucles
    Dim output() As Variant             ' Tableau temporaire pour stocker les données
    Dim lastRow As Long                ' Dernière ligne avec des données
    Dim destRow As Long                 ' Ligne où on va coller dans BDD_Costs
    Dim srcRowCount As Long           ' Nombre de lignes à copier
    
    ' Variables pour identifier les positions des colonnes importantes
    Dim formatColLC As Long           ' Position colonne "P&L LC"
    Dim formatColUSD As Long          ' Position colonne "P&L USD"
    Dim plColPos As Long              ' Position colonne "P&L"
    Dim fournisseurColPos As Long     ' Position colonne "Fournisseur"
    Dim compteColPos As Long          ' Position colonne "Compte"
    Dim libCompteColPos As Long       ' Position colonne "Lib Compte"
    Dim currencyColPos As Long        ' Position colonne "Currency"
    Dim nameColPos As Long            ' Position colonne "Name"
    Dim memoColPos As Long            ' Position colonne "Memo/Description"
    Dim numCompteColPos As Long       ' Position colonne "Num Compte"
    Dim classColPos As Long           ' Position colonne "Class"
    Dim concatColPos As Long           ' Position colonne "Concat"
    Dim intercoColPos As Long         ' Position colonne "Interco"
    Dim concat2ColPos As Long         ' Position colonne "Concat2"
    Dim plTranscoColPos As Long       ' Position colonne "P&L Transco"
    Dim plSpeTranscoColPos As Long    ' Position colonne "P&L Spe Transco"
    Dim manualAutoColPos As Long      ' Position colonne "Manual_Auto"
    ' *** AJOUT : Nouvelle variable pour la colonne U (P&L Source) ***
    Dim plSourceColPos As Long        ' Position colonne "P&L Source"
    
   
    ' Variables logiques (True/False) pour savoir quoi faire
    Dim useUSDforLC As Boolean        ' True = utiliser USD au lieu de LC pour Costs_Inc
    Dim isFFSASorInno As Boolean     ' True = feuille FF_SAS ou Inno (traitement spécial)
    
    ' Variables pour vérifier quelles colonnes existent dans chaque feuille source
    Dim hasFournisseur As Boolean, hasCompte As Boolean, hasLibCompte As Boolean, hasPL As Boolean
    Dim hasName As Boolean, hasMemo As Boolean, hasLibelle As Boolean, hasComplement As Boolean
    Dim hasNumCompte As Boolean, hasJrnFolio As Boolean, hasClass As Boolean, hasInterco As Boolean
    
    ' Variables pour traiter les données
    Dim cellValue As Variant          ' Valeur d'une cellule qu'on est en train de lire
    Dim strValue As String           ' Version texte d'une valeur
    Dim currentYear As Long          ' Année de la ligne en cours
    Dim currentMonth As Long         ' Mois de la ligne en cours
    Dim requiredHeaders As Variant   ' Liste des colonnes obligatoires
    Dim missingColumns As String     ' Liste des colonnes manquantes (pour erreurs)

    ' GESTION D'ERREURS
    On Error GoTo ErrorHandler

    '==================================================================================
    ' OPTIMISATION DES PERFORMANCES
    '==================================================================================
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    Application.EnableEvents = False

 
    '==================================================================================
    ' DÉFINITION DES FEUILLES À TRAITER
    '==================================================================================
    selectedSheets = Array("Costs_Inc", "Costs_Canada", "Costs_Singapour", "Costs_Apac", "Costs_Europe", "Costs_FF_SAS", "Costs_Inno")

    '==================================================================================
    ' VÉRIFICATION QUE LES FEUILLES OBLIGATOIRES EXISTENT
    '==================================================================================
    
    On Error Resume Next
    Set wsDest = ThisWorkbook.Worksheets("BDD_Costs")
    On Error GoTo ErrorHandler
    
    If wsDest Is Nothing Then
        MsgBox "La feuille 'BDD_Costs' n'existe pas dans ce classeur.", vbCritical
        Exit Sub
    End If

    On Error Resume Next
    Dim wsTransco As Worksheet
    Set wsTransco = ThisWorkbook.Worksheets("Transco_New")
    On Error GoTo ErrorHandler
    
    If wsTransco Is Nothing Then
        MsgBox "La feuille 'Transco_New' n'existe pas dans ce classeur.", vbCritical
        Exit Sub
    End If

    '==================================================================================
    ' NETTOYAGE DE LA FEUILLE DE DESTINATION
    '==================================================================================
    wsDest.Rows("2:" & wsDest.Rows.Count).ClearContents

    '==================================================================================
    ' DÉFINITION DES EN-TÊTES DE LA FEUILLE CONSOLIDÉE
    '==================================================================================
    
    ' *** MODIFICATION : AJOUT DE "P&L Source" en colonne U (index 20) ***
    Dim newHeaders As Variant
    newHeaders = Array("Entity", "Year", "Month", "Interco", "Num Compte", "Name", "Memo/Description", "Class", "Concat", "Concat2", "Compte", "Lib Compte", "P&L Transco", "P&L Spe Transco", "P&L", "Fournisseur", "P&L LC", "Currency", "P&L USD", "Manual_Auto", "P&L Source")


    ' Écrire ces en-têtes
    For i = 1 To UBound(newHeaders) + 1
        wsDest.Cells(1, i).Value = newHeaders(i - 1)
    Next i

    '==================================================================================
    ' PRÉPARATION DES STRUCTURES DE DONNÉES
    '==================================================================================
    
    Set headers = New Collection
    For i = 1 To UBound(newHeaders) + 1
        headers.Add Trim(newHeaders(i - 1))
    Next i

    ' Identifier où se trouve chaque colonne importante
    For i = 1 To headers.Count
        Select Case Trim(headers(i))
            Case "P&L LC": formatColLC = i
            Case "P&L USD": formatColUSD = i
            Case "P&L": plColPos = i
            Case "Fournisseur": fournisseurColPos = i
            Case "Compte": compteColPos = i
            Case "Lib Compte": libCompteColPos = i
            Case "Currency": currencyColPos = i
            Case "Name": nameColPos = i
            Case "Memo/Description": memoColPos = i
            Case "Num Compte": numCompteColPos = i
            Case "Class": classColPos = i
            Case "Concat": concatColPos = i
            Case "Interco": intercoColPos = i
            Case "Concat2": concat2ColPos = i
            Case "P&L Transco": plTranscoColPos = i
            Case "P&L Spe Transco": plSpeTranscoColPos = i
            Case "Manual_Auto": manualAutoColPos = i
            ' *** AJOUT : Mapping de la nouvelle colonne U ***
            Case "P&L Source": plSourceColPos = i
        End Select
    Next i

 
    '==================================================================================
    ' VÉRIFICATION DES COLONNES CRITIQUES
    '==================================================================================
    missingColumns = ""
    If plColPos = 0 Then missingColumns = missingColumns & "P&L, "
    If compteColPos = 0 Then missingColumns = missingColumns & "Compte, "
    If libCompteColPos = 0 Then missingColumns = missingColumns & "Lib Compte, "
    If classColPos = 0 Then missingColumns = missingColumns & "Class, "
    If concatColPos = 0 Then missingColumns = missingColumns & "Concat, "
    If intercoColPos = 0 Then missingColumns = missingColumns & "Interco, "
    ' *** AJOUT : Vérification de la nouvelle colonne U ***
    If plSourceColPos = 0 Then missingColumns = missingColumns & "P&L Source, "

    If missingColumns <> "" Then
        missingColumns = Left(missingColumns, Len(missingColumns) - 2)
        MsgBox "Erreur : Les colonnes critiques suivantes n'ont pas été trouvées dans les en-têtes : " & missingColumns, vbCritical
        Exit Sub
    End If

    wsDest.Rows.RowHeight = 14
    destRow = 2

    '==================================================================================
    ' BOUCLE PRINCIPALE : TRAITER CHAQUE FEUILLE SOURCE
    '==================================================================================
    For Each wsName In selectedSheets
        Set ws = Nothing
        
        On Error Resume Next
        Set ws = ThisWorkbook.Worksheets(wsName)
        On Error GoTo ErrorHandler
         
        If ws Is Nothing Then GoTo NextSheet

        isFFSASorInno = (ws.Name = "Costs_FF_SAS" Or ws.Name = "Costs_Inno")

        '==============================================================================
        ' ANALYSE DES COLONNES DE LA FEUILLE SOURCE
        '==============================================================================
        
        Set colMap = CreateObject("Scripting.Dictionary")
        useUSDforLC = False

     
        For c = 1 To ws.Cells(1, ws.Columns.Count).End(xlToLeft).Column
            headerName = Trim(CStr(ws.Cells(1, c).Value))
       
            If Len(headerName) > 0 Then
                colMap(headerName) = c
            End If
        Next c

        '==============================================================================
        ' VÉRIFICATION DES COLONnes OBLIGATOIRES
        '==============================================================================
      
        requiredHeaders = Array("Entity", "Year", "Month", "P&L LC", "P&L USD")
        
        For i = LBound(requiredHeaders) To UBound(requiredHeaders)
            headerName = requiredHeaders(i)
            
            If headerName = "P&L LC" And ws.Name = "Costs_Inc" Then
                If Not colMap.exists("P&L USD") Then
                    MsgBox "La feuille '" & ws.Name & "' ne contient pas 'P&L USD' pour remplacer 'P&L LC'.", vbCritical
                    GoTo NextSheet
                Else
                    useUSDforLC = True
                End If
            ElseIf Not colMap.exists(headerName) Then
                MsgBox "La feuille '" & ws.Name & "' ne contient pas la colonne '" & headerName & "'. Elle sera ignorée.", vbExclamation
                GoTo NextSheet
            End If
        Next i

        '==============================================================================
        ' VÉRIFICATION DES COLONnes OPTIONNELLES
        '==============================================================================
        hasFournisseur = colMap.exists("Fournisseur")
        hasCompte = colMap.exists("Compte")
        hasLibCompte = colMap.exists("Lib Compte")
        hasPL = colMap.exists("P&L")
        hasName = colMap.exists("Name")
        hasMemo = colMap.exists("Memo/Description")
        hasLibelle = colMap.exists("Libellé")
        hasComplement = colMap.exists("Complément")
        hasNumCompte = colMap.exists("Num Compte")
        hasJrnFolio = colMap.exists("Jrn Folio")
        hasClass = colMap.exists("Class")
        hasInterco = colMap.exists("Interco")

        '==============================================================================
        ' PRÉPARATION DU TABLEAU DE DONNÉES
        '==============================================================================
        
        lastRow = ws.Cells(ws.Rows.Count, 1).End(xlUp).Row
  
        If lastRow < 2 Then GoTo NextSheet
        
        srcRowCount = lastRow - 1
        
        ReDim output(1 To srcRowCount, 1 To headers.Count)

        '==============================================================================
        ' REMPLISSAGE DU TABLEAU AVEC LES DONNÉES
        '==============================================================================
        For r = 2 To lastRow
            If IsNumeric(ws.Cells(r, colMap("Year")).Value) Then
                currentYear = CLng(ws.Cells(r, colMap("Year")).Value)
            Else
                currentYear = 0
            End If

            If IsNumeric(ws.Cells(r, colMap("Month")).Value) Then
                currentMonth = CLng(ws.Cells(r, colMap("Month")).Value)
            Else
                currentMonth = 0
            End If

            For i = 1 To headers.Count
                headerName = headers(i)
                
                Select Case headerName
                    Case "Entity"
                        cellValue = ws.Cells(r, colMap("Entity")).Value
                        
                    Case "Year"
                        cellValue = currentYear
                        
                    Case "Month"
                        cellValue = currentMonth
    
                    Case "Interco"
                        If hasInterco Then
                            cellValue = ws.Cells(r, colMap("Interco")).Value
                        Else
                            cellValue = ""
                        End If
                        
                    Case "Num Compte"
                        If hasNumCompte Then
                            cellValue = ws.Cells(r, colMap("Num Compte")).Value
                            If isFFSASorInno And hasJrnFolio And (Trim(CStr(cellValue)) = "" Or IsEmpty(cellValue)) Then
                                cellValue = ws.Cells(r, colMap("Jrn Folio")).Value
                            End If
                        
                        ElseIf isFFSASorInno And hasJrnFolio Then
                            cellValue = ws.Cells(r, colMap("Jrn Folio")).Value
                        Else
                            cellValue = ""
                        End If
                        
                    Case "Name"
                        If isFFSASorInno And hasLibelle Then
                            cellValue = ws.Cells(r, colMap("Libellé")).Value
                        ElseIf hasName Then
                            cellValue = ws.Cells(r, colMap("Name")).Value
                        Else
                            cellValue = ""
                        End If
                        
                    Case "Memo/Description"
                        If isFFSASorInno And hasComplement Then
                            cellValue = ws.Cells(r, colMap("Complément")).Value
                        ElseIf hasMemo Then
                            cellValue = ws.Cells(r, colMap("Memo/Description")).Value
                        Else
                            cellValue = ""
                        End If
        
                    Case "Class"
                        If isFFSASorInno And hasComplement Then
                            cellValue = ws.Cells(r, colMap("Complément")).Value
                        ElseIf hasClass Then
                            cellValue = ws.Cells(r, colMap("Class")).Value
                        Else
                            cellValue = ""
                        End If
                        
                    Case "Compte"
                        If hasCompte Then
                            cellValue = ws.Cells(r, colMap("Compte")).Value
                        Else
                            cellValue = ""
                        End If
             
                    Case "Concat", "Concat2", "P&L Transco", "P&L Spe Transco"
                        cellValue = ""
                         
                    Case "Lib Compte"
                        ' Règle complexe selon l'année
                        If currentYear = 2024 Then
                            ' Pour 2024, importer les données existantes
                            If hasLibCompte Then
                                cellValue = ws.Cells(r, colMap("Lib Compte")).Value
                            ElseIf isFFSASorInno Then
                                ' Pour FF_SAS/Inno, utiliser la valeur de "Compte"
                                cellValue = ws.Cells(r, colMap("Compte")).Value
                            Else
                                cellValue = ""
                            End If ' <-- CORRECTION : Fin du If interne
                        Else
                            ' Pour 2025, sera calculé par formule plus tard
                            cellValue = ""
                        End If ' <-- Fin du If externe
                         
                    Case "P&L"
                        ' Règle selon l'année (Colonne O)
                        If currentYear = 2024 And hasPL Then
                            ' Pour 2024, importer les données
                            cellValue = ws.Cells(r, colMap("P&L")).Value
                        Else
                            ' Pour 2025, sera calculé par formule plus tard (avec les formules plus bas)
                            cellValue = ""
                        End If
   
                    ' *** AJOUT : Logique pour la nouvelle colonne P&L Source (colonne U) ***
                    Case "P&L Source"
                        ' Copie systématique de la valeur P&L de la feuille source (pour toutes les années)
                        If hasPL Then
                            cellValue = ws.Cells(r, colMap("P&L")).Value
                        Else
                            cellValue = ""
                        End If
                    ' *******************************************************************
  
                    Case "Fournisseur"
                        If currentYear = 2024 Then
                            If hasFournisseur Then
                                cellValue = ws.Cells(r, colMap("Fournisseur")).Value
                            Else
                                cellValue = ""
                            End If
                        Else
                            cellValue = ""
                        End If
                        
                    Case "P&L LC"
                        If useUSDforLC Then
                            cellValue = ws.Cells(r, colMap("P&L USD")).Value
                        Else
                            cellValue = ws.Cells(r, colMap("P&L LC")).Value
                        End If
                        
                    Case "P&L USD"
                        cellValue = ws.Cells(r, colMap("P&L USD")).Value
                        
                    Case "Currency"
                        cellValue = ""
                        
                    Case "Manual_Auto"
                        cellValue = "" ' Sera calculé par formule plus bas
                        
                    Case Else
                        If colMap.exists(headerName) Then
                            cellValue = ws.Cells(r, colMap(headerName)).Value
                        Else
                            cellValue = ""
                        End If
                End Select

                ' Nettoyer la valeur avant de la stocker
                If IsError(cellValue) Then
                    output(r - 1, i) = ""
                ElseIf IsEmpty(cellValue) Then
                    output(r - 1, i) = ""
                ElseIf IsNumeric(cellValue) Then
                    output(r - 1, i) = cellValue
                Else
                    output(r - 1, i) = CStr(cellValue)
                End If
            Next i
        Next r

       
    
        '==============================================================================
        ' COLLAGE DES DONNÉES DANS BDD_COSTS
        '==============================================================================
        wsDest.Range(wsDest.Cells(destRow, 1), wsDest.Cells(destRow + srcRowCount - 1, headers.Count)).Value = output

        '==============================================================================
        ' FORMATAGE DES COLONnes MONÉTAIRES
        '==============================================================================
        If formatColLC > 0 Then
            wsDest.Range(wsDest.Cells(destRow, formatColLC), wsDest.Cells(destRow + srcRowCount - 1, formatColLC)).NumberFormat = "#,##0;(#,##0);""-"""
        End If
        If formatColUSD > 0 Then
            wsDest.Range(wsDest.Cells(destRow, formatColUSD), wsDest.Cells(destRow + srcRowCount - 1, formatColUSD)).NumberFormat = "#,##0;(#,##0);""-"""
        End If

        ' *** AJOUT : Formatage de la nouvelle colonne U ***
        If plSourceColPos > 0 Then
            wsDest.Range(wsDest.Cells(destRow, plSourceColPos), wsDest.Cells(destRow + srcRowCount - 1, plSourceColPos)).NumberFormat = "#,##0;(#,##0);""-"""
        End If
        ' *************************************************

        destRow = destRow + srcRowCount
        
NextSheet:
    Next wsName

'==================================================================================
' APPLICATION DES FORMULES APRÈS IMPORT
'==================================================================================
' Maintenant qu'on a toutes les données, on calcule les colonnes complexes

lastRow = wsDest.Cells(wsDest.Rows.Count, 1).End(xlUp).Row

If lastRow > 1 Then
    Dim oldCalculationState As Long
    oldCalculationState = Application.Calculation
    Application.Calculation = xlCalculationManual
    Application.EnableEvents = False
    
    Dim lastRowTransco As Long
    lastRowTransco = 20000
    
    '==========================================================================
    ' FORMULE POUR LA COLONNE "CONCAT"
    '==========================================================================
    For r = 2 To lastRow
        wsDest.Cells(r, concatColPos).Formula = _
             "=CONCAT(" & _
            wsDest.Cells(r, compteColPos).Address(False, False) & "," & _
            wsDest.Cells(r, nameColPos).Address(False, False) & "," & _
            wsDest.Cells(r, classColPos).Address(False, False) & "," & _
            wsDest.Cells(r, memoColPos).Address(False, False) & ")"
    Next r

    '==========================================================================
    ' FORMULE POUR LA COLONNE "CONCAT2"
    '==========================================================================
    For r = 2 To lastRow
        wsDest.Cells(r, concat2ColPos).Formula = _
            "=CONCAT(" & _
            wsDest.Cells(r, compteColPos).Address(False, False) & "," & _
            wsDest.Cells(r, nameColPos).Address(False, False) & "," & _
            wsDest.Cells(r, classColPos).Address(False, False) & "," & _
            wsDest.Cells(r, memoColPos).Address(False, False) & "," & _
            wsDest.Cells(r, formatColLC).Address(False, False) & ")"
    Next r


    '==========================================================================
    ' FORMULE POUR LA COLONNE "CURRENCY"
    '==========================================================================
    For r = 2 To lastRow
        wsDest.Cells(r, currencyColPos).Formula = _
            "=INDEX(Transco_New!$B$2:$B$" & lastRowTransco & ",MATCH(" & _
            wsDest.Cells(r, 1).Address(False, False) & ",Transco_New!$A$2:$A$" & lastRowTransco & ",0))"
    Next r

    '==========================================================================
    ' FORMULE POUR LA COLONNE "LIB COMPTE" (ANNÉE 2025 SEULEMENT)
    '==========================================================================
    For r = 2 To lastRow
        If CLng(wsDest.Cells(r, 2).Value) = 2025 Then
            If wsDest.Cells(r, 1).Value = "Costs_FF_SAS" Or wsDest.Cells(r, 1).Value = "Costs_Inno" Then
                wsDest.Cells(r, libCompteColPos).Value = wsDest.Cells(r, compteColPos).Value
            Else
                Dim formulaText As String
                formulaText = "=INDEX(Transco_New!$G$2:$G$" & lastRowTransco & ",MATCH(1,(Transco_New!$D$2:$D$" & lastRowTransco & "=$A" & r & ")*(Transco_New!$F$2:$F$" & lastRowTransco & "=" & wsDest.Cells(r, compteColPos).Address(False, False) & "),0))"
                wsDest.Cells(r, libCompteColPos).FormulaArray = formulaText
            End If
        End If
    Next r

    '==========================================================================
    ' FORMULES POUR LES NOUVELLES COLONNES P&L
    '==========================================================================
    For r = 2 To lastRow
        If CLng(wsDest.Cells(r, 2).Value) = 2025 Then
            ' --- P&L Transco ---
            wsDest.Cells(r, plTranscoColPos).FormulaArray = _
                "=IFERROR(INDEX(Transco_New!$H$2:$H$" & lastRowTransco & ",MATCH(1,(Transco_New!$D$2:$D$" & lastRowTransco & "=$A" & r & ")*(Transco_New!$F$2:$F$" & lastRowTransco & "=" & wsDest.Cells(r, compteColPos).Address(False, False) & "),0)),""n.a."")"
            
            ' --- P&L Spe Transco (Technique pour éviter la limite de 255 caractères) ---
            Dim concat2Addr As String, concatAddr As String
            concat2Addr = wsDest.Cells(r, concat2ColPos).Address(False, False)
            concatAddr = wsDest.Cells(r, concatColPos).Address(False, False)
            
            With wsDest.Cells(r, plSpeTranscoColPos)
                .FormulaArray = "=IFERROR(INDEX(Transco_New!$T$2:$T$" & lastRowTransco & ",MATCH(1,(Transco_New!$K$2:$K$" & lastRowTransco & "=$A" & r & ")*(Transco_New!$M$2:$M$" & lastRowTransco & "=" & concat2Addr & "),0)),""__PLACEHOLDER__"")"
                .Replace """__PLACEHOLDER__""", "IFERROR(INDEX(Transco_New!$T$2:$T$" & lastRowTransco & ",MATCH(1,(Transco_New!$K$2:$K$" & lastRowTransco & "=$A" & r & ")*(Transco_New!$M$2:$M$" & lastRowTransco & "=" & concatAddr & "),0)),""n.a."")", xlPart
            End With

            ' --- P&L ---
            wsDest.Cells(r, plColPos).Formula = _
                "=IF(" & wsDest.Cells(r, plSpeTranscoColPos).Address(False, False) & "<>""n.a.""," & wsDest.Cells(r, plSpeTranscoColPos).Address(False, False) & "," & wsDest.Cells(r, plTranscoColPos).Address(False, False) & ")"
        End If
    Next r

    '==========================================================================
    ' FORMULE POUR LA COLONNE "FOURNISSEUR" (ANNÉE 2025 SEULEMENT)
    '==========================================================================
    For r = 2 To lastRow
        If CLng(wsDest.Cells(r, 2).Value) = 2025 Then
            ' --- Fournisseur (Technique pour éviter la limite de 255 caractères) ---
            Dim concat2Addr_f As String, concatAddr_f As String
            concat2Addr_f = wsDest.Cells(r, concat2ColPos).Address(False, False)
            concatAddr_f = wsDest.Cells(r, concatColPos).Address(False, False)
    
            With wsDest.Cells(r, fournisseurColPos)
                .FormulaArray = "=IFERROR(INDEX(Transco_New!$S$2:$S$" & lastRowTransco & ",MATCH(1,(Transco_New!$K$2:$K$" & lastRowTransco & "=$A" & r & ")*(Transco_New!$M$2:$M$" & lastRowTransco & "=" & concat2Addr_f & "),0)),""__PLACEHOLDER__"")"
                
                .Replace """__PLACEHOLDER__""", "IFERROR(INDEX(Transco_New!$S$2:$S$" & lastRowTransco & ",MATCH(1,(Transco_New!$K$2:$K$" & lastRowTransco & "=$A" & r & ")*(Transco_New!$M$2:$M$" & lastRowTransco & "=" & concatAddr_f & "),0)), ""n.a."")", xlPart
            End With
        End If
    Next r
    
    '==========================================================================
    ' FORMULE POUR LA COLONNE "Manual_Auto"
    '==========================================================================
    For r = 2 To lastRow
        If plColPos > 0 And plSpeTranscoColPos > 0 And manualAutoColPos > 0 Then
            wsDest.Cells(r, manualAutoColPos).Formula = _
                "=IF(OR(ISBLANK(" & wsDest.Cells(r, plColPos).Address(False, False) & ")," & wsDest.Cells(r, plColPos).Address(False, False) & "<>" & wsDest.Cells(r, plSpeTranscoColPos).Address(False, False) & "),""Auto"",""Manually"")"
        End If
    Next r

    ' Restaurer les paramètres Excel
    Application.EnableEvents = True
    Application.Calculation = oldCalculationState
End If

    wsDest.Rows.RowHeight = 14

'==================================================================================
' NETTOYAGE ET FINALISATION
'==================================================================================
CleanUp:
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    Application.EnableEvents = True
    
    MsgBox "Consolidation terminée dans 'BDD_Costs'.", vbInformation
   
    Exit Sub

'==================================================================================
' GESTION D'ERREURS
'==================================================================================
ErrorHandler:
    MsgBox "Une erreur est survenue : " & Err.Description & vbCrLf & _
           "À la ligne : " & Erl, vbCritical
    Resume CleanUp

End Sub

